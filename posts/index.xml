<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on /dev/random</title>
    <link>https://kumarsourav.github.io/posts/</link>
    <description>Recent content in Posts on /dev/random</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 20 Aug 2018 19:39:13 +0530</lastBuildDate>
    
        <atom:link href="https://kumarsourav.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>SimpleScanf</title>
      <link>https://kumarsourav.github.io/posts/simplescanf/</link>
      <pubDate>Mon, 20 Aug 2018 19:39:13 +0530</pubDate>
      
      <guid>https://kumarsourav.github.io/posts/simplescanf/</guid>
      <description>

&lt;p&gt;&lt;em&gt;&lt;strong&gt;scanf()&lt;/strong&gt;&lt;/em&gt; is widely used in c to read inputs from standard input(&lt;strong&gt;stdin&lt;/strong&gt;).
I wrote a simple scanf routine to understand how input can be read from &lt;strong&gt;stdin&lt;/strong&gt;
just like &lt;code&gt;scanf()&lt;/code&gt;.
It is not optimized but works. This article documents the learning process.&lt;/p&gt;

&lt;p&gt;To keep things simple, my simplescanf() routine handles only basic inputs:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;1. %d (integers)
2. %c (char)
3. %s (string)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It does not support assignment suppression character &lt;code&gt;*&lt;/code&gt;, field width or any other features.&lt;/p&gt;

&lt;h2 id=&#34;function-prototype&#34;&gt;Function Prototype&lt;/h2&gt;

&lt;p&gt;scanf()  takes variable number of arguments. We don&amp;rsquo;t know how many variables we are going to read from stdin.
Hence, the prototype of simplescanf() also takes variable argument and is declared as&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt; simplescanf(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#b00040&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;fmt, ...)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It returns the number of arguments it read from stdin.&lt;/p&gt;

&lt;h2 id=&#34;reading-variable-input&#34;&gt;Reading variable input&lt;/h2&gt;

&lt;p&gt;varibale arguments in c can be read using &lt;strong&gt;va_start()&lt;/strong&gt;, &lt;strong&gt;va_arg()&lt;/strong&gt; and &lt;strong&gt;va_end()&lt;/strong&gt; routines.
&lt;code&gt;man va_arg&lt;/code&gt; gives the details regarding these rotuines. Below is a simple example with inline
comment to understand how to use variable arguments in c.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//accepts variable argument
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#b00040&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;foo&lt;/span&gt;(&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;const&lt;/span&gt; &lt;span style=&#34;color:#b00040&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;fmt, ...)
{
        &lt;span style=&#34;color:#b00040&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;str;
        &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;val;
        va_list ap;

        &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//intialize ap to process variable arguments
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//fmt is the last param before variable arg starts
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//fmt points to string &amp;#34;s d&amp;#34; or &amp;#34;s&amp;#34; or whatever string is
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//being passed.
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;        &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//ap is initialized to list of variable args (&amp;amp;buff, &amp;amp;var,)
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;        va_start(ap, fmt);

        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;fmt) {
                &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;switch&lt;/span&gt;(&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;fmt) {
                &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;s&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;
                        &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//call to va_arg gives the type &amp;amp; value of next variable arg
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;                        &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//from ap list(&amp;amp;buff here)
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;                        str &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; va_arg(ap, &lt;span style=&#34;color:#b00040&#34;&gt;char&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;);
                        printf(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;%s&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;, str);
                        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;break&lt;/span&gt;;
                &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;case&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#666&#34;&gt;:&lt;/span&gt;
                        &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//call to va_arg gives the type &amp;amp; value of next variable arg
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;                        &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//from ap list(&amp;amp;var here)
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;                        val &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; va_arg(ap, &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;);
                        printf(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;%d&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;val);
                        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;break&lt;/span&gt;;
                }
                &lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;fmt;
        }
        &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//invalidate the ap list
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;        va_end(ap);

}
&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;()
{
        &lt;span style=&#34;color:#b00040&#34;&gt;char&lt;/span&gt; buff[&lt;span style=&#34;color:#666&#34;&gt;10&lt;/span&gt;] &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;hello&amp;#34;&lt;/span&gt;;
        &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt; var &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;100&lt;/span&gt;;
        &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// call with 1 argument
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//fmt in foo() points to &amp;#34;s&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;        foo(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;s&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;buff);
        &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// call with 2 arguments,
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//fmt in foo() points to &amp;#34;s d&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;        foo(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;s d&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;buff, &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;var);

        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Above program will give the following output.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;//first call to foo()
hello
//second call to foo()
hello
100&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;implementation&#34;&gt;Implementation&lt;/h2&gt;

&lt;p&gt;The implementation uses &lt;strong&gt;fgets()&lt;/strong&gt; to read the input from &lt;strong&gt;stdin&lt;/strong&gt;. While the case for reading
a string or an integer is pretty straightforward, there is a case for handling char inputs which
is worth mentioning.
Consider the program below to read two chars from &lt;strong&gt;stdin&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;()
{
        &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;
        &lt;span style=&#34;color:#b00040&#34;&gt;char&lt;/span&gt; ch;
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;) {
                scanf(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;%c&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;ch);
                printf(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Input number[%d]: %c &amp;#34;&lt;/span&gt;, i, ch);
        }
        printf(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;On giving the below input to the above program, we can see&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Input:
 a b

Output:
Input number[0]: a Input number[1]:&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;the program does not print the second char &lt;code&gt;b&lt;/code&gt; as expected. Well, it may appear
that the program has failed to read, it is not the case actually. If you notice
the input, there is a whitespace after &lt;code&gt;a&lt;/code&gt; (between &lt;code&gt;a&lt;/code&gt; &amp;amp; &lt;code&gt;b&lt;/code&gt;). whitespace is also a char and this
is what is read by our program. Since, we are only reading two chars,the loop
terminates and the program ends.&lt;/p&gt;

&lt;p&gt;If you want to read the second char &lt;code&gt;b&lt;/code&gt; in this case or ignore whitespaces/newline
in general, you will have to add a whitespace before &lt;code&gt;%c&lt;/code&gt; in your program as shown
below&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;main&lt;/span&gt;()
{
        &lt;span style=&#34;color:#b00040&#34;&gt;int&lt;/span&gt; i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;
        &lt;span style=&#34;color:#b00040&#34;&gt;char&lt;/span&gt; ch;
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;for&lt;/span&gt; (i &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;; i &lt;span style=&#34;color:#666&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;2&lt;/span&gt;; i&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;) {
		&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//whitespace added before %c
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;                scanf(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34; %c&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&lt;/span&gt;ch);
                printf(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;Input number[%d]: %c &amp;#34;&lt;/span&gt;, i, ch);
        }
        printf(&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#b62;font-weight:bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#34;&lt;/span&gt;);
        &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now on giving the same input to the above program, second char is also printed.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;Input:
 a b

Output:
Input number[0]: a Input number[1]: b&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In case of integer or string, this behaviour is not observed. By default, any whitespace
or newline given as input is ignored.&lt;/p&gt;

&lt;p&gt;Keeping the above things in mind, we can now discuss the implementation of &lt;strong&gt;simplescanf()&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;1.We read from &lt;strong&gt;stdin&lt;/strong&gt; using &lt;strong&gt;fillbuff()&lt;/strong&gt; which in turn uses fgets().&lt;/p&gt;

&lt;p&gt;2.&lt;code&gt;fmt&lt;/code&gt; points to the string(e.g &amp;ldquo;%s %d %c&amp;rdquo;) passed to &lt;strong&gt;simplescanf()&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;3.skip any whitespace in &lt;code&gt;fmt&lt;/code&gt; using &lt;strong&gt;isspace()&lt;/strong&gt;. &lt;code&gt;space&lt;/code&gt; variable is used to handle the case of char input
as discussed above.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;......
......
&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//fillbuff returns pointer to a buffer read through fgets()
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;bptr &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; fillbuff(buff);
&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;fmt) {
	len &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;
	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//skip any space chars in fmt
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;while&lt;/span&gt; (&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;fmt &lt;span style=&#34;color:#666&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; isspace(&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;fmt)) {
		&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;fmt;
		&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// useful to handle the case of char
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;space;
	}
.....
.....&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The flow for reading integer and string is similar. Below is the code for reading a string.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;fmt &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;s&amp;#39;&lt;/span&gt;) {
 	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//check() returns first non-space character or \n
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt; 	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//by parsing buffer pointer bptr
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	 bptr &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; check(bptr);
	 &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;bptr &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;) {
	 &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//if we encounter newline, we again have to read from stdin. 
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	 &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//remember how scanf() works when you press enter ? It waits until 
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	 &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//you enter an input other than newline or space
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;		 bptr &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; fillbuff(buff);
		 &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;continue&lt;/span&gt;;
	 }
	 &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// get the next arguments which is address of the variable where
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	 &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//string is going to be saved
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	 str &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; va_arg(ap, &lt;span style=&#34;color:#b00040&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;);
	 &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//get the length of chars we are going to read
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	 len &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; strcspn(bptr, SPACE);
	 &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//copy the &amp;#39;len&amp;#39; chars from bptr to the destination str
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	 strncpy(str, bptr, len);
	 &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//move the buffer pointer to point to element after &amp;#39;len&amp;#39; chars
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	 bptr &lt;span style=&#34;color:#666&#34;&gt;+=&lt;/span&gt; len;
	 &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//increase the count by 1 as we have read an input
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	 &lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;count;
	 &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//reset the space to 0. This is to check space for %c case
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	 space &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;
 }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The comments explain what is happening in the code. &lt;code&gt;scanf()&lt;/code&gt; waits for an input
other than whitespace/newline in case of integers/string. Hence, we make sure that
we are reading a non-sapce character from stdin in our case too.&lt;/p&gt;

&lt;p&gt;The flow for reading char is similar to strings/integer, except for the special case
of char(with space or without - discussed above).&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt; &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color:#00f&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;fmt &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;) {
 	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//only one char is going to be read
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	 len &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;1&lt;/span&gt;;
	 &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//we check for any space before &amp;#39;%c&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	 &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//It will decide whether to ignore or read whitespace/newline
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	 &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; (space &lt;span style=&#34;color:#666&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;) {
	 	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// if space is greater than zero, behaviour is similar to
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;// reading integer/string. read again from stdin until a 
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;		&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//non-space char is entered.
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;		 bptr &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; check(bptr);
		 &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;bptr &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;) {
			 bptr &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; fillbuff(buff);
			 &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;continue&lt;/span&gt;;
		 }
	 }
	 &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//At this point we are done with the case where whitespace is 
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	 &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//before %c. Now we just want to copy &amp;amp; save the char to our variable
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//get the variable - char read from stdin will be saved in it
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	 str &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; va_arg(ap, &lt;span style=&#34;color:#b00040&#34;&gt;char&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;);
	 &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//copy char to str
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	 strncpy(str, bptr, len);
	 &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//if newline was entered, we need to check for any inputs entered
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	 &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//after newline
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	 &lt;span style=&#34;color:#008000;font-weight:bold&#34;&gt;if&lt;/span&gt; (&lt;span style=&#34;color:#666&#34;&gt;*&lt;/span&gt;bptr &lt;span style=&#34;color:#666&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#ba2121&#34;&gt;&amp;#39;\n&amp;#39;&lt;/span&gt;) {
		 bptr &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; fillbuff(buff);
		 &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//bptr is updated
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;		 len &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;
	 }
	 &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//if newline was not entered we adjust bptr by +1(one char read)
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	 &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//if it was newline, bptr is already updated in the if conition
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	 &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//above
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	 bptr &lt;span style=&#34;color:#666&#34;&gt;+=&lt;/span&gt; len;
	 &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//increase count of input read
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	 &lt;span style=&#34;color:#666&#34;&gt;++&lt;/span&gt;count;
	 &lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;//reset space to zero
&lt;/span&gt;&lt;span style=&#34;color:#408080;font-style:italic&#34;&gt;&lt;/span&gt;	 space &lt;span style=&#34;color:#666&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#666&#34;&gt;0&lt;/span&gt;;
 }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;usage&#34;&gt;Usage&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;simplescanf()&lt;/code&gt; can be used the same way one would use &lt;code&gt;scanf()&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;simplescanf(&amp;#34; %c %d %s&amp;#34;, &amp;amp;ch, &amp;amp;var, &amp;amp;buff);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Code for &lt;code&gt;simplescanf()&lt;/code&gt; can be found &lt;a href=&#34;https://github.com/kumarsourav/Simple-Scanf/blob/master/simplescanf.c&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>